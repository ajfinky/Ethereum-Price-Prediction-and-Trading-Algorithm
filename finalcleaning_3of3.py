# -*- coding: utf-8 -*-
"""FinalCleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LISx43NRXkJYX3DI62opPEcnxwt1lekr
"""

# imports
import pandas as pd
from google.colab import files
import re
from datetime import datetime, timedelta

# mount drive
from google.colab import drive
drive.mount('/content/gdrive')

# load data
df = pd.read_csv('/content/gdrive/MyDrive/econ224 project: Ethereum Analysis/Data/new_blocks.csv')

"""#TODO: 
#### 1. Drop miner, extract_time, txn_link [DONE]
#### 2. Split gas_used [DONE]
#### 3. Split burnt_fees [DONE]
#### 4. remove "Gwei" from base_fee and make int scaled to eth [DONE]
#### 5. remove "Ether" from reward and make int [DONE]
#### 6. Create 3 data sets: daily snapshots, txn content snapshots, raw
"""

# 1
df = df.drop(columns=['miner', 'extract_time', 'txn_link'])
df.rename(columns={'txn': 'txn_count'}, inplace=True)
df.head()

# 2
df[['gas_used']]

# split variables
gas_used = df['gas_used'].apply(lambda x: x.split())
gas_used_df = pd.DataFrame([])
gas_used_df['gas_used'] = gas_used
# make variables separate columns
gas_used_df = pd.DataFrame(gas_used_df.gas_used.tolist(), columns=['gas_used','percent_gas_used', 'percent_of_gas_target'])
gas_used_df

# clean columns
gas_used_df['gas_used'] = gas_used_df['gas_used'].apply(lambda x: int(x.replace(',', '')))
pattern = r'(?<=\()[0-9.]+'
gas_used_df['percent_gas_used'] = gas_used_df['percent_gas_used'].apply(lambda x: 0.01*float(re.findall(pattern, x)[0]))
pattern = r'[0-9.+-]+(?=\%)'
gas_used_df['percent_of_gas_target'] = gas_used_df['percent_of_gas_target'].apply(lambda x: 0.01*float(re.findall(pattern, x)[0]))

gas_used_df

# merge df and gas_used_df on gas_used
df['gas_used'] = gas_used_df['gas_used']
df['percent_gas_used'] = gas_used_df['percent_gas_used']
df['percent_of_gas_target'] = gas_used_df['percent_of_gas_target']
df

# 3
df[['burnt_fees']]

# split variables
burnt_fees = df['burnt_fees'].apply(lambda x: x.split())
burnt_fees_df = pd.DataFrame([])
burnt_fees_df['burnt_fees'] = burnt_fees
# make variables separate columns
burnt_fees_df = pd.DataFrame(burnt_fees_df.burnt_fees.tolist(), columns=['burnt_fees','percent_burnt_fees'])
burnt_fees_df

# clean columns
burnt_fees_df['burnt_fees'] = burnt_fees_df['burnt_fees'].apply(lambda x: float(x))
pattern = r'[0-9.+-]+(?=\%)'
burnt_fees_df['percent_burnt_fees'] = burnt_fees_df['percent_burnt_fees'].apply(lambda x: 0.01*float(re.findall(pattern, x)[0]))

burnt_fees_df

# merge df and burnt_fees_df on burnt_fees
df['burnt_fees'] = burnt_fees_df['burnt_fees']
df['percent_burnt_fees'] = burnt_fees_df['percent_burnt_fees']
df.head()

# 1 gwei = 0.000000001 ether 10^-9
pattern = r'(?<=[0-9.]) (Gwei|Ether)'
df['base_fee'] = df['base_fee'].apply(lambda x: x.replace(',', ''))
df['base_fee'] = df['base_fee'].apply(lambda x: float(re.sub(pattern, '', x)))
df['reward'] = df['reward'].apply(lambda x: x.replace(',', ''))
df['reward'] = df['reward'].apply(lambda x: float(re.sub(pattern, '', x)))
df

"""# Flatten Data into Daily Snapshots"""

daily_df = df
daily_df.head()

# remove time from timestamp
daily_df['timestamp'] = daily_df['timestamp'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S'))
daily_df['timestamp'] = daily_df['timestamp'].apply(lambda x: x.date())
daily_df

# do
block = []
block.append(daily_df['block'].iloc[0])
timestamp = []
timestamp.append(daily_df['timestamp'].iloc[0])
txn_count = []
txn_count.append(daily_df['txn_count'].iloc[0])
uncles = []
uncles.append(daily_df['uncles'].iloc[0])
gas_used = []
gas_used.append(daily_df['gas_used'].iloc[0])
gas_limit = []
gas_limit.append(daily_df['gas_limit'].iloc[0])
base_fee = []
base_fee.append(daily_df['base_fee'].iloc[0])
reward = []
reward.append(daily_df['reward'].iloc[0])
burnt_fees = []
burnt_fees.append(daily_df['burnt_fees'].iloc[0])

# 0 -> blocks
# 1 -> timestamp
# 2 -> txn_count
# 3 -> uncles
# 4 -> gas_used
# 5 -> gas_limit
# 6 -> base_fee
# 7 -> reward
# 8 -> burnt_fees
j = 0
count = 0
for i, row in daily_df.iterrows():
  if i == 0:
    continue
  # timestamp protocol
  if timestamp[j] != row[1]:
    block.append(row[0])
    timestamp.append(row[1])
    txn_count.append(row[2])
    uncles.append(row[3])
    gas_used.append(row[4])
    gas_limit.append(row[5])
    base_fee[j] = base_fee[j] / count
    base_fee.append(row[6])
    reward.append(row[7])
    burnt_fees.append(row[8])
    j = j + 1
    count = 0
  txn_count[j] = txn_count[j] + row[2]
  uncles[j] = uncles[j] + row[3]
  gas_used[j] = gas_used[j] + row[4]
  gas_limit[j] = gas_limit[j] + row[5]
  reward[j] = reward[j] + row[7]
  burnt_fees[j] = burnt_fees[j] + row[8]
  # base_fee protocol
  base_fee[j] = base_fee[j] + row[6]
  count = count + 1

# block
# timestamp
# txn_count
# uncles
# gas_used
# gas_limit
# base_fee
# reward
# burnt_fees
data = {'root_block': block, 'timestamp': timestamp, 'txn_count': txn_count,
        'uncles': uncles, 'gas_used': gas_used, 'gas_limit': gas_limit,
        'avg_base_fee': base_fee, 'agg_reward': reward, 
        'burnt_fees': burnt_fees}
daily_snapshots = pd.DataFrame(data)
daily_snapshots.drop(labels=[0,306], inplace=True)
daily_snapshots['avg_base_fee'] = 10e-9*daily_snapshots['avg_base_fee']
daily_snapshots['gas_limit'] = 10e-9*daily_snapshots['gas_limit']
daily_snapshots['gas_used'] = 10e-9*daily_snapshots['gas_used']
daily_snapshots

# save as csv
from google.colab import files
daily_snapshots.to_csv('eth_network_daily_snapshots.csv', index=False) 
files.download('eth_network_daily_snapshots.csv')